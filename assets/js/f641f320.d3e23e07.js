"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6257],{6171:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"estado","title":"Eventos y estados","description":"Responder a eventos","source":"@site/docs/estado.md","sourceDirName":".","slug":"/estado","permalink":"/CursoReact/docs/estado","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/estado.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"id":"estado","title":"Eventos y estados","sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Renderizado","permalink":"/CursoReact/docs/renderizado"},"next":{"title":"Hooks","permalink":"/CursoReact/docs/hooks"}}');var s=a(4848),r=a(8453);const o={id:"estado",title:"Eventos y estados",sidebar_position:6},i="Eventos y estados",c={},l=[{value:"Responder a eventos",id:"responder-a-eventos",level:2},{value:"Actualizar la pantalla (estado)",id:"actualizar-la-pantalla-estado",level:2},{value:"Combinando eventos + actualizaci\xf3n de pantalla",id:"combinando-eventos--actualizaci\xf3n-de-pantalla",level:2},{value:"Resumen",id:"resumen",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"eventos-y-estados",children:"Eventos y estados"})}),"\n",(0,s.jsx)(n.h2,{id:"responder-a-eventos",children:"Responder a eventos"}),"\n",(0,s.jsx)(n.p,{children:"Un evento es algo que hace el usuario: un clic, escribir en un input, pasar el mouse, etc.\r\nEn React, puedes poner funciones que reaccionan a esos eventos."}),"\n",(0,s.jsx)(n.p,{children:"Ejemplo simple:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'function Boton() {\r\n  function manejarClick() {\r\n    alert("\xa1Hiciste clic!");\r\n  }\r\n\r\n  return <button onClick={manejarClick}>Haz clic aqu\xed</button>;\r\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"onClick = {manejarClick}"})," \u2192 cuando el usuario haga clic, ejecuta la funci\xf3n manejarClick."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"React nombra los eventos con camelCase \u2192 onClick, onChange, onSubmit."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"actualizar-la-pantalla-estado",children:"Actualizar la pantalla (estado)"}),"\n",(0,s.jsx)(n.p,{children:"Para que React actualice la pantalla, usamos algo llamado estado.\r\nEl estado es como una cajita de datos que React vigila.\r\nCuando cambias el estado \u2192 React redibuja el componente con la informaci\xf3n nueva."}),"\n",(0,s.jsx)(n.p,{children:"Ejemplo con contador:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'import { useState } from "react";\r\n\r\nfunction Contador() {\r\n  const [contador, setContador] = useState(0);\r\n\r\n  function sumar() {\r\n    setContador(contador + 1);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p>Has hecho clic {contador} veces</p>\r\n      <button onClick={sumar}>Haz clic</button>\r\n    </div>\r\n  );\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Qu\xe9 pasa:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"useState(0) \u2192 crea el estado inicial en 0."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"contador \u2192 el valor actual."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"setContador() \u2192 funci\xf3n para cambiar el valor."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Cada vez que llamas setContador(...), React vuelve a renderizar el componente y muestra el nuevo n\xfamero."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"combinando-eventos--actualizaci\xf3n-de-pantalla",children:"Combinando eventos + actualizaci\xf3n de pantalla"}),"\n",(0,s.jsx)(n.p,{children:"Podemos combinar eventos y estado para hacer interfaces din\xe1micas.\r\nEjemplo: mostrar/ocultar un texto con un bot\xf3n."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'import { useState } from "react";\r\n\r\nfunction MostrarOcultar() {\r\n  const [visible, setVisible] = useState(true);\r\n\r\n  function toggle() {\r\n    setVisible(!visible); // Cambia true \u2192 false y viceversa\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={toggle}>\r\n        {visible ? "Ocultar" : "Mostrar"}\r\n      </button>\r\n      {visible && <p> \xa1Me puedes ver!</p>}\r\n    </div>\r\n  );\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Qu\xe9 pasa:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Cuando haces clic, cambias el estado (visible)."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"React vuelve a renderizar y decide si debe mostrar el < p > o no (renderizado condicional)."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"resumen",children:"Resumen"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Eventos: permiten que el usuario interact\xfae (clic, escribir, etc.)."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Estado (useState): almacena datos que pueden cambiar."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"React actualiza la pantalla autom\xe1ticamente cuando el estado cambia \u2192 no tienes que actualizar el HTML manualmente."}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>i});var t=a(6540);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);